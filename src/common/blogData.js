export const data = [
  {
    blogid: 74,
    email: "shanmugamsanthosh22@gmail.com",
    title: "LeetCode Problem : 2622. Cache With Time Limit",
    content:
      '<h1><a href="https://leetcode.com/problems/cache-with-time-limit/" rel="noopener noreferrer" target="_blank">2622. Cache With Time Limit</a></h1><h2>Write a class that allows getting and setting&nbsp;key-value pairs, however a&nbsp;<strong>time until expiration</strong>&nbsp;is associated with each key.</h2><h2>The class has three public methods:</h2><h2><code>set(key, value, duration)</code>:&nbsp;accepts an integer&nbsp;<code>key</code>, an&nbsp;integer&nbsp;<code>value</code>, and a&nbsp;<code>duration</code>&nbsp;in milliseconds. Once the&nbsp;<code>duration</code>&nbsp;has \t\t    elapsed, the key should be inaccessible. The method should return&nbsp;<code>true</code>&nbsp;if the same&nbsp;un-expired key already exists   and&nbsp;<code>false</code>&nbsp;otherwise. Both the value and duration should be overwritten if the key already exists.</h2><h2 class="ql-indent-1"><code>get(key)</code>: if an un-expired key exists, it should return the associated value. Otherwise it should return&nbsp;<code>-1</code>.</h2><h2 class="ql-indent-1"><code>count()</code>: returns the count of un-expired keys.</h2><h2>&nbsp;</h2><h2><strong>Example 1:</strong></h2><pre class="ql-syntax" spellcheck="false">Input: \nactions = ["TimeLimitedCache", "set", "get", "count", "get"]\nvalues = [[], [1, 42, 100], [1], [], [1]]\ntimeDelays = [0, 0, 50, 50, 150]\nOutput: [null, false, 42, 1, -1]\nExplanation:\nAt t=0, the cache is constructed.\nAt t=0, a key-value pair (1: 42) is added with a time limit of 100ms. The value doesn\'t exist so false is returned.\nAt t=50, key=1 is requested and the value of 42 is returned.\nAt t=50, count() is called and there is one active key in the cache.\nAt t=100, key=1 expires.\nAt t=150, get(1) is called but -1 is returned because the cache is empty.\n</pre><h2><br></h2><h2><strong>Example 2:</strong></h2><pre class="ql-syntax" spellcheck="false">Input: \nactions = ["TimeLimitedCache", "set", "set", "get", "get", "get", "count"]\nvalues = [[], [1, 42, 50], [1, 50, 100], [1], [1], [1], []]\ntimeDelays = [0, 0, 40, 50, 120, 200, 250]\nOutput: [null, false, true, 50, 50, -1, 0]\nExplanation:\nAt t=0, the cache is constructed.\nAt t=0, a key-value pair (1: 42) is added with a time limit of 50ms. The value doesn\'t exist so false is returned.\nAt t=40, a key-value pair (1: 50) is added with a time limit of 100ms. A non-expired value already existed so true is returned and the old value was overwritten.\nAt t=50, get(1) is called which returned 50.\nAt t=120, get(1) is called which returned 50.\nAt t=140, key=1 expires.\nAt t=200, get(1) is called but the cache is empty so -1 is returned.\nAt t=250, count() returns 0 because the cache is empty.\n</pre><h2>&nbsp;</h2><h2><strong>Constraints:</strong></h2><h2><code>0 &lt;= key, value &lt;= 109</code></h2><h2><code>0 &lt;= duration &lt;= 1000</code></h2><h2><code>1 &lt;= actions.length &lt;= 100</code></h2><h2><code>actions.length === values.length</code></h2><h2><code>actions.length === timeDelays.length</code></h2><h2><code>0 &lt;= timeDelays[i] &lt;= 1450</code></h2><h2><code>actions[i]</code>&nbsp;is one of "TimeLimitedCache", "set", "get" and&nbsp;"count"</h2><h2>First action is always "TimeLimitedCache" and must be executed immediately, with a 0-millisecond delay</h2><h2><br></h2><h2><strong>Approach:</strong></h2><p><br></p><h2>1) Use&nbsp;<code style="background-color: rgba(0, 10, 32, 0.05); color: rgba(38, 38, 38, 0.75);">setTimeout</code>&nbsp;to remove items from the cache.</h2><h2>2) f a key already exists in the cache, cancel its timeout.</h2><h2>3) Overall time/space complexity:&nbsp;<span style="color: rgba(38, 38, 38, 0.75);">O(n)</span></h2><h2><br></h2><h2><strong>Code in JS:</strong></h2><p><br></p><pre class="ql-syntax" spellcheck="false">var TimeLimitedCache = function() {\n&nbsp; &nbsp; this.cache = new Map();\n};\n\n\n/** \n&nbsp;* @param {number} key\n&nbsp;* @param {number} value\n&nbsp;* @param {number} duration time until expiration in ms\n&nbsp;* @return {boolean} if un-expired key already existed\n&nbsp;*/\nTimeLimitedCache.prototype.set = function(key, value, duration) {\n&nbsp; &nbsp; let found = this.cache.has(key);\n\n\n&nbsp; &nbsp; if(found){\n&nbsp; &nbsp; &nbsp; &nbsp; clearTimeout(this.cache.get(key).expiration);\n&nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; this.cache.set(key,{\n&nbsp; &nbsp; &nbsp; &nbsp; value: value,\n&nbsp; &nbsp; &nbsp; &nbsp; expiration: setTimeout(()=&gt;{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.cache.delete(key)\n&nbsp; &nbsp; &nbsp; &nbsp; },duration)\n&nbsp; &nbsp; })\n\n\n&nbsp; &nbsp; return found;\n\n\n};\n\n\n/** \n&nbsp;* @param {number} key\n&nbsp;* @return {number} value associated with key\n&nbsp;*/\nTimeLimitedCache.prototype.get = function(key) {\n&nbsp; &nbsp; return this.cache.has(key) ? this.cache.get(key).value : -1;\n};\n\n\n/** \n&nbsp;* @return {number} count of non-expired keys\n&nbsp;*/\nTimeLimitedCache.prototype.count = function() {\n&nbsp; &nbsp; return this.cache.size;\n};\n\n\n/**\n&nbsp;* const timeLimitedCache = new TimeLimitedCache()\n&nbsp;* timeLimitedCache.set(1, 42, 1000); // false\n&nbsp;* timeLimitedCache.get(1) // 42\n&nbsp;* timeLimitedCache.count() // 1\n&nbsp;*/\n</pre><p><br></p><h2><br></h2><h2>Solution Explanation by <a href="https://leetcode.com/u/shanmugamsanthosh22/" rel="noopener noreferrer" target="_blank">@shanmugamsanthosh22</a></h2><p><br></p><h2><a href="https://leetcode.com/problems/cache-with-time-limit/submissions/1273136087?envType=study-plan-v2&amp;envId=30-days-of-javascript" rel="noopener noreferrer" target="_blank">Code Submission</a></h2><p><br></p>',
    creation_time: "2024-05-31T09:23:51.379+00:00",
    image:
      "https://firebasestorage.googleapis.com/v0/b/cloud-point2.appspot.com/o/shanmugamsanthosh22%40gmail.com%2Finsightful%2F1c5ce46e-266f-43f0-b543-75bf341239b5.png?alt=media&token=303de8cf-7bae-4a06-bb4e-ac0f46732a3e",
    likes: null,
    tag: ["LeetCode", "Javascript", "Problem Solving", "Timeout", "Map"],
    uid: "7wfqx0bkEgWqa9xVT0ypa5DHBxo1",
  },
  {
    blogid: 59,
    email: "shanmugamsanthosh22@gmail.com",
    title:
      "LeetCode Problem : 2635. Apply Transform Over Each Element in Array",
    content:
      '<h1><a href="https://leetcode.com/problems/apply-transform-over-each-element-in-array/" rel="noopener noreferrer" target="_blank">2635. Apply Transform Over Each Element in Array</a></h1><h2>Given an integer array&nbsp;<code>arr</code>&nbsp;and a mapping function&nbsp;<code>fn</code>, return&nbsp;a new array with a transformation applied to each element.</h2><h2>The returned array should be created such that&nbsp;<code>returnedArray[i] = fn(arr[i], i)</code>.</h2><h2>Please solve it without the built-in&nbsp;<code>Array.map</code>&nbsp;method.</h2><h2>&nbsp;</h2><h2><strong>Example 1:</strong></h2><pre class="ql-syntax" spellcheck="false">Input: arr = [1,2,3], fn = function plusone(n) { return n + 1; }\nOutput: [2,3,4]\nExplanation:\nconst newArray = map(arr, plusone); // [2,3,4]\nThe function increases each value in the array by one. \n</pre><h2><br></h2><h2><strong>Example 2:</strong></h2><pre class="ql-syntax" spellcheck="false">Input: arr = [1,2,3], fn = function plusI(n, i) { return n + i; }\nOutput: [1,3,5]\nExplanation: The function increases each value by the index it resides in.\n</pre><h2><br></h2><h2><strong>Example 3:</strong></h2><pre class="ql-syntax" spellcheck="false">Input: arr = [10,20,30], fn = function constant() { return 42; }\nOutput: [42,42,42]\nExplanation: The function always returns 42.\n</pre><h2>&nbsp;</h2><h2><strong>Constraints:</strong></h2><h2><code>0 &lt;= arr.length &lt;= 1000</code></h2><h2><code>-109&nbsp;&lt;= arr[i] &lt;= 109</code></h2><h2><code>fn</code>&nbsp;returns a number</h2><p><br></p><h1><strong>Solution</strong></h1><p><br></p><h2>In this Problem we have to iterate over the array and transform the each element of the array and return a new transformed array for this we can use map() in Javascript which is a Array function that runs over each and every element of the array  applied to the function returned value is applied to the new transformed array,</h2><p><br></p><pre class="ql-syntax" spellcheck="false">/**\n&nbsp;* @param {number[]} arr\n&nbsp;* @param {Function} fn\n&nbsp;* @return {number[]}\n&nbsp;*/\nvar map = function(arr, fn) {\n&nbsp; &nbsp; return arr.map(fn);\n};\n</pre><h2><br></h2><h2><strong>Map() in Javascript :</strong></h2><p><br></p><h2>The&nbsp;<code>map()</code>&nbsp;method of&nbsp;<code><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" rel="noopener noreferrer" target="_blank">Array</a></code>&nbsp;instances creates a new array populated with the results of calling a provided function on every element in the calling array.</h2><p><br></p><h2>Solution Explanation : <a href="https://leetcode.com/u/shanmugamsanthosh22/" rel="noopener noreferrer" target="_blank">@shanmugamsanthosh22</a></h2><p><br></p><h2><a href="https://leetcode.com/problems/apply-transform-over-each-element-in-array/submissions/1259658922" rel="noopener noreferrer" target="_blank">Code Submission</a></h2><p><br></p>',
    creation_time: "2024-05-16T14:00:16.286+00:00",
    image:
      "https://firebasestorage.googleapis.com/v0/b/cloud-point2.appspot.com/o/shanmugamsanthosh22%40gmail.com%2Finsightful%2F1c5ce46e-266f-43f0-b543-75bf341239b5.png?alt=media&token=303de8cf-7bae-4a06-bb4e-ac0f46732a3e",
    likes: null,
    tag: ["LeetCode", "Map", "Array", "Problem Solving", "Javascript"],
    uid: "7wfqx0bkEgWqa9xVT0ypa5DHBxo1",
  },
  {
    blogid: 50,
    email: "shanmugamsanthosh22@gmail.com",
    title: "Exploring the MERN Stack: Building Modern Web Applications",
    content:
      '<h2>The MERN stack is a popular technology stack for building full-stack web applications. It consists of MongoDB, Express.js, React, and Node.js, each serving a specific purpose in the development process. Let\'s dive into each component of the MERN stack:</h2><h2><br></h2><h2><strong>MongoDB</strong></h2><h2><br></h2><h2>MongoDB is a NoSQL database that stores data in flexible, JSON-like documents. It provides scalability and flexibility, making it ideal for handling large amounts of data in modern web applications. MongoDB\'s document model allows developers to work with data in a way that is natural and intuitive.</h2><h2><br></h2><pre class="ql-syntax" spellcheck="false">// Example MongoDB document\n{\n  title: \'Sample Post\',\n  content: \'This is a sample post stored in MongoDB.\'\n}\n</pre><h2><br></h2><h2><strong>Express.js</strong></h2><h2><br></h2><h2>Express.js is a minimalist and flexible Node.js web application framework that provides a robust set of features for web and mobile applications. It simplifies the process of building APIs and handling HTTP requests, making it an excellent choice for creating the backend of MERN stack applications.</h2><h2><br></h2><pre class="ql-syntax" spellcheck="false">// Example Express route\napp.get(\'/api/posts\', (req, res) =&gt; {\n  Post.find((err, posts) =&gt; {\n    if (err) {\n      res.status(500).send(err);\n    } else {\n      res.status(200).send(posts);\n    }\n  });\n});\n</pre><h2><br></h2><h2><strong>React</strong></h2><h2><br></h2><h2>React is a JavaScript library for building user interfaces. It allows developers to create dynamic and interactive UI components that update efficiently in response to data changes. React\'s component-based architecture makes it easy to build reusable UI elements and manage the state of an application effectively.</h2><h2><br></h2><pre class="ql-syntax" spellcheck="false">// Example React component\nconst PostList = ({ posts }) =&gt; {\n  return (\n    &lt;div&gt;\n      {posts.map(post =&gt; (\n        &lt;div key={post._id}&gt;{post.title}&lt;/div&gt;\n      ))}\n    &lt;/div&gt;\n  );\n};\n</pre><h2><br></h2><h2><strong>Node.js</strong></h2><h2><br></h2><h2>Node.js is a JavaScript runtime built on Chrome\'s V8 JavaScript engine. It allows developers to run JavaScript on the server-side, enabling the development of fast and scalable network applications. Node.js, combined with Express, forms the backend of MERN stack applications.</h2><h2><br></h2><pre class="ql-syntax" spellcheck="false">// Example Node.js server setup\napp.listen(5000, () =&gt; {\n  console.log(\'Server is running on port 5000\');\n});\n</pre><h2><br></h2><h2>Benefits of the MERN Stack:</h2><h2><br></h2><h2><strong>Single Language</strong>: Developers can use JavaScript for both the frontend and backend development.</h2><h2><strong>Efficiency</strong>: React\'s virtual DOM and Node.js\'s non-blocking I/O operations improve application performance.</h2><h2><strong>Modularity</strong>: Each component of the MERN stack can be used independently, promoting code reusability.</h2><h2><strong>Community Support</strong>: The MERN stack has a large and active developer community, providing resources and libraries for building web applications.</h2><h2><br></h2><h2>Example MERNStack Project with stack blitz :</h2><h2><br></h2><iframe class="ql-video" frameborder="0" allowfullscreen="true" src="https://stackblitz.com/edit/vitejs-vite-dbc4bk?ctl=1&amp;embed=1&amp;file=index.html"></iframe><h2><br></h2><h2>Materials :</h2><h2><br></h2><h2><a href="https://www.geeksforgeeks.org/mern-stack/" rel="noopener noreferrer" target="_blank">https://www.geeksforgeeks.org/mern-stack/</a></h2><h2><br></h2><h2>Video References :</h2><h2><br></h2><iframe class="ql-video" frameborder="0" allowfullscreen="true" src="https://www.youtube.com/embed/-42K44A1oMA?showinfo=0"></iframe><h2><br></h2><h2>Conclusion:</h2><h2><br></h2><h2>The MERN stack stands out as a versatile and robust technology stack for building modern web applications. By combining MongoDB\'s flexibility, Express.js\'s simplicity, React\'s reusability, and Node.js\'s scalability, developers have a powerful toolkit at their disposal. The seamless integration of these technologies allows for the creation of dynamic, interactive, and high-performance web applications.</h2><h2><br></h2><h2>Whether you are a seasoned developer or just starting in the world of full-stack development, the MERN stack offers a streamlined development process, thanks to its unified JavaScript ecosystem. The modular nature of each component promotes code reusability and maintainability, while the active developer community ensures continuous support and updates.</h2><h2><br></h2><h2>In conclusion, embracing the MERN stack empowers developers to build innovative web applications that meet the demands of today\'s digital landscape. With its rich features, flexibility, and efficiency, the MERN stack paves the way for crafting exceptional user experiences and driving technological advancements in the ever-evolving web development industry. Jumpstart your journey with the MERN stack and unlock endless possibilities in creating cutting-edge web solutions.</h2><p><br></p><p><br></p>',
    creation_time: "2024-04-28T10:38:23.174+00:00",
    image:
      "https://firebasestorage.googleapis.com/v0/b/cloud-point2.appspot.com/o/shanmugamsanthosh22%40gmail.com%2Finsightful%2FWhat_is_the_MERN_stack_and_how_do_I_use_it.jpg?alt=media&token=b9eb32ad-627f-4c9c-86d7-466577fc24ec",
    likes: null,
    tag: ["MERN", "MongoDB", "Express.js", "React", "Node.js"],
    uid: "7wfqx0bkEgWqa9xVT0ypa5DHBxo1",
  },
  {
    blogid: 45,
    email: "shanmugamsanthosh22@gmail.com",
    title: "Mastering GitHub: A Step-by-Step Guide with Practical Examples",
    content: `<h2>GitHub is a crucial tool for developers to collaborate, manage code, and streamline the software development process. In this blog, we will explore GitHub\'s key features through practical examples to help you master this essential platform.</h2><h2><br></h2><h2>1. Setting Up Your GitHub Account</h2><h2><br></h2><h2>To get started, create a GitHub account at github.com and set up your profile. Once logged in, you can create a new repository to store your projects. For example, let\'s create a repository named "my-project" with the following commands in the terminal:</h2><h2><br></h2><pre class="ql-syntax" spellcheck="false"># Initialize a new Git repository\ngit init\n\n# Add remote repository URL\ngit remote add origin https://github.com/your-username/my-project.git\n\n# Commit your changes\ngit commit -m "Initial commit"\n\n# Push changes to GitHub\ngit push -u origin master\n</pre><h2><br></h2><h2>2. Collaboration with Forks and Pull Requests</h2><h2><br></h2><h2>If you want to contribute to an existing project, you can fork the repository, make changes, and submit a pull request to the original project. For instance, let\'s fork a repository named "example-project" and create a new feature branch:</h2><h2><br></h2><pre class="ql-syntax" spellcheck="false"># Clone the forked repository\ngit clone https://github.com/your-username/example-project.git\ncd example-project\n\n# Create a new branch for your feature\ngit checkout -b new-feature\n\n# Make changes and commit them\ngit add .\ngit commit -m "Implement new feature"\n\n# Push changes to your forked repository\ngit push origin new-feature\n</pre><h2><br></h2><h2>After making changes, you can open a pull request on GitHub to propose merging your new feature into the original project.</h2><h2><br></h2><h2>3. Issue Tracking and Project Management</h2><h2><br></h2><h2>GitHub\'s issue tracking system allows you to report bugs, suggest enhancements, and organize tasks. You can create issues, assign them to team members, set labels, and track their progress. Here\'s how you can create a new issue using GitHub\'s interface:</h2><h2><br></h2><h2>Navigate to the "Issues" tab in your repository.</h2><h2>Click on the "New issue" button.</h2><h2>Enter a title and description for the issue.</h2><h2>Assign labels, set milestones, and assign the issue to collaborators.</h2><h2>Submit the issue to start tracking it in the project.</h2><h2><br></h2><h2>4. Continuous Integration with GitHub Actions</h2><h2><br></h2><h2>GitHub Actions enable you to automate workflows, including testing, building, and deploying your code. By creating a workflow file (e.g., main.yml) in the .github/workflows directory, you can define custom actions to run on specific events. Here\'s an example workflow that runs tests on every push to the main branch:</h2><h2><br></h2><pre class="ql-syntax" spellcheck="false">name: Run Tests\n\non:\n  push:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Run tests\n      run: |\n        npm install\n        npm test\n</pre><h2><br></h2><h2>5. Advanced GitHub Features: Webhooks and Security</h2><h2><br></h2><h2>GitHub offers advanced features like webhooks for triggering events in external systems based on actions within your repository. By configuring webhooks, you can automate tasks such as updating a deployment server when code is pushed. Additionally, managing security settings, code scanning, and permissions ensures the integrity and protection of your projects.</h2><h2><br></h2><h2>By harnessing the power of GitHub through practical examples, you can enhance your development workflow, collaborate effectively, and accelerate your coding projects to new heights.</h2><h2><br></h2><h2>Video References:</h2><h2><br></h2><iframe class="ql-video" frameborder="0" allowfullscreen="true" src="https://www.youtube.com/embed/RGOj5yH7evk?showinfo=0"></iframe><h2><br></h2><h2>Materials:</h2><p><br></p><h2><a href="https://www.freecodecamp.org/news/git-and-github-crash-course/" rel="noopener noreferrer" target="_blank">https://www.freecodecamp.org/news/git-and-github-crash-course/</a></h2>`,
    creation_time: "2024-04-18T12:32:15.413+00:00",
    image:
      "https://firebasestorage.googleapis.com/v0/b/cloud-point2.appspot.com/o/shanmugamsanthosh22%40gmail.com%2Finsightful%2F0_N1fmHtI8gmkH_2Vu.png?alt=media&token=2cf9f1bb-8bf4-439e-be8d-0d5977fecd88",
    likes: null,
    tag: [
      "GitHub",
      "Version Control",
      "Collaboration",
      "Continuous Integration",
      "VCS",
    ],
    uid: "7wfqx0bkEgWqa9xVT0ypa5DHBxo1",
  },
  {
    blogid: 46,
    email: "shanmugamsanthosh22@gmail.com",
    title: "Exploring the Power of Java: A Comprehensive Guide",
    content: `<h2>Java is a high-level, object-oriented programming language that is widely used for building robust and scalable applications. It was developed by Sun Microsystems (now owned by Oracle Corporation) and released in 1995. Java is known for its platform independence, meaning that Java code can run on any device that has a Java Virtual Machine (JVM) installed.</h2><h2><br></h2><h2><strong>Introduction to Java Programming</strong></h2><h2><br></h2><h2>Java is a versatile language that is used for developing a wide range of applications, from mobile apps to enterprise-level systems. One of the key features of Java is its "write once, run anywhere" philosophy, which makes it ideal for cross-platform development. Java programs are typically compiled to bytecode, which can then be executed on any device that has a JVM.</h2><h2><br></h2><h2><strong>Key Features of Java</strong></h2><h2><br></h2><h2><strong>Object-Oriented:</strong>&nbsp;Java is a true object-oriented language, which means that everything in Java is an object.</h2><h2><strong>Platform-Independent:</strong>&nbsp;Java code can run on any device with a JVM, making it highly portable.</h2><h2><strong>Robust and Secure:</strong>&nbsp;Java is designed to be robust and secure, with built-in features for memory management and security.</h2><h2><strong>Rich Standard Library:</strong>&nbsp;Java comes with a comprehensive standard library that provides ready-to-use classes and methods for common programming tasks.</h2><h2><strong>Multithreaded:</strong>&nbsp;Java supports multithreading, allowing developers to write efficient concurrent programs.</h2><h2><br></h2><h2><strong>Getting Started with Java</strong></h2><h2><br></h2><h2>To start programming in Java, you need to install the Java Development Kit (JDK) on your computer. The JDK includes tools for compiling and running Java programs, such as the <code>javac</code> compiler and the <code>java</code> interpreter. You can write Java code in any text editor and save it with a <code>.java</code> extension.</h2><h2><br></h2><pre class="ql-syntax" spellcheck="false">public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println("Hello, World!");\n    }\n}\n</pre><h2><br></h2><h2><strong>Resources for Learning Java</strong></h2><h2><br></h2><h2>If you\'re new to Java programming, there are plenty of resources available to help you get started. Online tutorials, books, and coding challenges can all be valuable tools for learning Java. Some popular resources for learning Java include:</h2><h2><br></h2><h2><a href="https://docs.oracle.com/javase/tutorial/" rel="noopener noreferrer" target="_blank" style="color: inherit;">Oracle\'s Java Tutorials</a></h2><h2><a href="https://www.codecademy.com/learn/learn-java" rel="noopener noreferrer" target="_blank" style="color: inherit;">Codecademy\'s Java Course</a></h2><h2><a href="https://www.oreilly.com/library/view/head-first-java/0596009208/" rel="noopener noreferrer" target="_blank" style="color: inherit;">Head First Java by Kathy Sierra and Bert Bates</a></h2><h2><br></h2><h2><strong>Conclusion</strong></h2><h2><br></h2><h2>Java is a powerful and versatile programming language that is used by millions of developers worldwide. Whether you\'re building a simple desktop application or a complex web service, Java has the tools and features you need to get the job done. By mastering Java, you can open up a world of possibilities in the world of software development.</h2>`,
    creation_time: "2024-04-18T13:49:21.569+00:00",
    image:
      "https://firebasestorage.googleapis.com/v0/b/cloud-point2.appspot.com/o/shanmugamsanthosh22%40gmail.com%2Finsightful%2Fwhat-is-java-image.png?alt=media&token=766f31aa-8b10-459c-980c-c0ce27ba10f9",
    likes: null,
    tag: ["Java", "Programming", "Object-Oriented", "Development", "OOPS"],
    uid: "7wfqx0bkEgWqa9xVT0ypa5DHBxo1",
  }
];
